// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.31'
    ext.jacoco_version = '0.8.4'
    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC16"
    id "jacoco"
}

detekt {
    toolVersion = "1.0.0-RC16"
    input = files("$projectDir/app/src/main/java")
    config = files("$project.rootDir/detekt/config.yml")
    baseline = file("$project.rootDir/detekt/baseline.xml")
    filters = ".*test.*,.*/resources/.*"
}

allprojects {
    repositories {
        google()
        jcenter()
        
    }

    ext {

        testLibs = [
            junit        : 'junit:junit:4.12',
            mockitoKotlin: "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0",
            mockitoInline: "org.mockito:mockito-inline:2.28.2"
            // testShared:         proejct('testShared')
        ]

        androidTestLibs = [
                testRunner:     'androidx.test:runner:1.2.0',
                espresso:       'androidx.text.espresso:expresso-core:3.2.0'
        ]

        kotlinLibs = [
                stdlib    : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
                coroutines: 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.2'
        ]

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"

apply plugin: "org.sonarqube"

sonarqube {
    androidVariant 'debug'

    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.verbose", true
        property "sonar.host.url", "http://192.168.1.150:9000"
        property "sonar.user", "admin"
        property "sonar.password", "admin"

        property "sonar.projectName", "MoviesApp"
        property "sonar.projectKey", "MoviesApp"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectVersion", "0.1"
        property "sonar.issuesReport.html.enable", "true"
        property "sonar.issuesReport.console.enable", "true"

        property "sonar.coverage.jacoco.xmlReportPaths", findAllReports()
        property "detekt.sonar.kotlin.config.path", "${rootProject.projectDir}/detekt/config.yml"

        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.kotlin.detekt.reportPaths", "$project.rootDir/build/reports/detekt/detekt.xml"

        property "sonar.jacoco.reportPaths", allTestCoverageFile
    }
}

String findAllReports() {
    def file = "${rootProject.buildDir}/reports"

    def sonarEnabledProjects = rootProject.subprojects
            .findAll { p -> p.sonarqube.getProperties().get("skipProject") == false }
            *.name
            .collect { projectName -> "$file/jacocoTestReport-${projectName}.xml" }
            .join(",")

    return sonarEnabledProjects
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include:'**/build/jacoco/test.exec')
}

task jacocoMerge(dependsOn: ['jacocoMergeTest']) {
    // used to run the other merge tasks
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'

//    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
//    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
//    classDirectories = files(subprojects.sourceSets.main.output)
//    executionData = files(subprojects.jacocoTestReport.executionData)
}

    task jacocoReport(type: JacocoReport) {
        for (p in allprojects) {
            def testTask = p.tasks.findByName("test")
            if (testTask != null)
                dependsOn(testTask)

            executionData.setFrom(file("${p.buildDir}/jacoco/test.exec"))
            classDirectories.from(file("${p.buildDir}/classes/java/main"))
        }
    }