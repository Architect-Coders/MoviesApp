apply plugin: 'jacoco'

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

def fileFilter = [
        '**/*Parcel.class',
        '**/*$CREATOR.class',
        '**/*Test*.*',
        '**/AutoValue_*.*',
        '**/*JavascriptBridge.class',
        '**/R.class',
        '**/R$*.class',
        '**/Manifest*.*',
        'android/**/*.*',
        '**/BuildConfig.*',
        '**/*$ViewBinder*.*',
        '**/*$ViewInjector*.*',
        '**/Lambda$*.class',
        '**/Lambda.class',
        '**/*Lambda.class',
        '**/*Lambda*.class',
        '**/*$InjectAdapter.class',
        '**/*$ModuleAdapter.class',
        '**/*$ViewInjector*.class',
        '**/*_MembersInjector.class', //Dagger2 generated code
        '*/*_MembersInjector*.*', //Dagger2 generated code
        '**/*_*Factory*.*', //Dagger2 generated code
        '**/*Component*.*', //Dagger2 generated code
        '**/*Module*.*' //Dagger2 generated code
]

def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
def mainSrc = "${project.projectDir}/src/main/java"
def kotlinDebugTree = fileTree(dir: "${buildDir}/classes/kotlin/main", excludes: fileFilter)
def kotlinAndroidDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

jacoco {
    version = "$jacoco_version"
    toolVersion = "$jacoco_version"
}

task jacocoTestReport(type: JacocoReport, overwrite: true) {
    group = "Reporting"
    description = "Generating Jacoco coverage reports"

    pluginManager.withPlugin("android") {
        android {
            testOptions {
                unitTests {
                    includeAndroidResources = true
                    returnDefaultValues = true
                }
                unitTests.all {
                    jacoco {
                        includeNoLocationClasses = true
                    }
                }
            }
        }
    }

    reports {
        xml.enabled = true
        html.enabled = false
        csv.enabled = false
        xml.destination file("${rootProject.buildDir}/reports/jacocoTestReport-${project.name}.xml")
    }
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree], [kotlinDebugTree], [kotlinAndroidDebugTree])
    executionData = fileTree(dir: "${rootProject.buildDir}/jacoco/", includes: ['**/*.exec', '**/*.ec'])
}
